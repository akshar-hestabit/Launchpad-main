

from pydantic import BaseModel, EmailStr 
from typing import Literal
from datetime import datetime

# -------- User Schemas -------- #

class UserCreate(BaseModel):
    username: str
    email: EmailStr
    password: str
    role: str | None = "customer"

class UserOut(BaseModel):
    id: int
    username: str
    email: EmailStr
    role: Literal["customer", "vendor", "admin", "guest"] = "customer"

    model_config = {
        "from_attributes": True
    }

class Token(BaseModel):
    access_token: str
    token_type: str 

class TokenData(BaseModel):
    username: str | None = None



# Module: app/models.py
# Brief: TODO - add description

from sqlalchemy import Column, Integer, String, Float, ForeignKey, DateTime
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from app.db import Base
from passlib.context import CryptContext  # For password hashing

# Setup the password hashing context
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)  # Primary key = already indexed
    username = Column(String, index=True, unique=True, nullable=False)  # Search/login
    email = Column(String, index=True, unique=True, nullable=True)     # Search/login
    hashed_password = Column(String, nullable=True)
    role = Column(String, nullable=False)

    orders = relationship("Order", back_populates="user", cascade="all, delete")
    wishlist = relationship("Wishlist", back_populates="user", cascade="all, delete")

    def set_password(self, password: str):
        self.hashed_password = pwd_context.hash(password)

    def verify_password(self, password: str):
        return pwd_context.verify(password, self.hashed_password)

auth.py 
from fastapi import APIRouter, Depends, HTTPException, Response
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from app import schemas, models, db
from datetime import datetime, timedelta
from jose import JWTError, jwt
from passlib.context import CryptContext
from dotenv import load_dotenv
import os
from fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer
from fastapi import status
from typing import Optional
import uuid

router = APIRouter()
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
load_dotenv()

# Add OAuth2 scheme for token validation
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")

def get_db():
    database = db.SessionLocal()
    try:
        yield database
    finally:
        database.close()

@router.post("/signup", response_model=schemas.UserOut)
def signup(user: schemas.UserCreate, database: Session = Depends(get_db)):
    existing = database.query(models.User).filter(models.User.username == user.username).first()

    if existing:
        raise HTTPException(status_code=400, detail="Username already taken")
    
    hashed_pw = pwd_context.hash(user.password)
    new_user = models.User(
        username=user.username,
        email=user.email,
        hashed_password=hashed_pw,
        role=user.role
    )

    database.add(new_user)
    database.commit()
    database.refresh(new_user)
    return new_user

SECRET_KEY = os.getenv("SECRET_KEY")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=15))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

def verify_token(token: str, db: Session):
    try:
        # Check if token is blacklisted
        blacklisted = db.query(models.TokenBlacklist).filter(models.TokenBlacklist.token == token).first()
        if blacklisted:
            return None
            
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise JWTError()
        return username
    except JWTError:
        return None

@router.post("/login", response_model=schemas.Token)
def login(response: Response, form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = db.query(models.User).filter(models.User.username == form_data.username).first()
    if not user or not pwd_context.verify(form_data.password, user.hashed_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.id}, expires_delta=access_token_expires
    )
    
    # Set cookie with token
    # response.set_cookie(
    #     key="access_token",
    #     value=f"Bearer {access_token}",
    #     httponly=True,
    #     max_age=ACCESS_TOKEN_EXPIRE_MINUTES * 60,
    #     secure=False,  
    #     samesite='none'
    # )
    
    return {
        "access_token": access_token,
        "token_type": "bearer",
        "expires_in": ACCESS_TOKEN_EXPIRE_MINUTES * 60,
        "user_id": user.id,
    }

@router.post("/logout")
def logout(response: Response, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    try:
        # Add token to blacklist
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        expires_at = datetime.fromtimestamp(payload['exp'])
        
        db.add(models.TokenBlacklist(
            token=token,
            expires_at=expires_at
        ))
        db.commit()
        
        # Clear the client-side cookie
        response.delete_cookie("access_token")
        
        return {"message": "Successfully logged out"}
    except JWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token",
        )

async def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    username = verify_token(token, db)
    if token:
        username = verify_token(token, db)
        user = db.query(models.User).filter(models.User.username == username).first()
        if user:
            return user
        
    guest = models.User(
        username="guest",
        email="",
        hashed_password="",
        role="guest"
    )
    guest.id = 0
    return guest

@router.post("/guest-login")
async def guest_login():
    # Generate a unique guest user ID or use a static one if needed
    guest_user_id = int(uuid.uuid4())

    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode = {
        "sub": guest_user_id,
        "role": "guest",
        "exp": datetime.utcnow() + access_token_expires
    }

    access_token = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

    return JSONResponse(content={
        "access_token": access_token,
        "token_type": "bearer",
        "user_id": guest_user_id
    })
    
cart.html 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Shopping Cart</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            background: url('https://images.unsplash.com/photo-1551462285-52c47236ed8c?q=80&w=1933&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D') no-repeat center center fixed; 
            background-size: cover;
            margin: 0;
            padding: 20px;
        }
        .cart-container { 
            max-width: 700px; 
            margin: 40px auto; 
            background: rgba(255,255,255,0.88); 
            padding: 30px; 
            border-radius: 8px; 
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        h1 { 
            text-align: center; 
            color: #333;
        }
        table { 
            width: 100%; 
            border-collapse: collapse; 
            margin-top: 20px;
        }
        th, td { 
            padding: 12px; 
            text-align: center; 
            border-bottom: 1px solid #eee;
        }
        th { 
            background: #f0f0f0;
            font-weight: bold;
        }
        .total-row td { 
            font-weight: bold; 
            background: #f9f9f9;
        }
        .actions button { 
            background: #007bff; 
            color: #fff; 
            border: none; 
            padding: 8px 14px; 
            border-radius: 4px; 
            cursor: pointer;
            transition: background 0.3s;
        }
        .actions button:hover { 
            background: #0056b3; 
        }
        .empty { 
            text-align: center; 
            color: #888; 
            margin: 40px 0;
            padding: 20px;
        }
        .back-link { 
            display: inline-block; 
            margin-bottom: 20px; 
            color: #007bff; 
            text-decoration: none;
            font-size: 14px;
        }
        .back-link:hover { 
            text-decoration: underline;
        }
        .btn { 
            display: inline-block; 
            margin: 5px 0; 
            padding: 10px 20px; 
            border-radius: 4px; 
            border: none; 
            cursor: pointer; 
            font-size: 16px;
            transition: opacity 0.3s;
        }
        .btn-primary { 
            background: #007bff; 
            color: #fff;
        }
        .btn-danger { 
            background: #dc3545; 
            color: #fff;
        }
        .cart-actions { 
            text-align: right; 
            margin-top: 20px; 
        }
        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
        input[type="number"] {
            width: 60px;
            padding: 5px;
            text-align: center;
        }
        .payment-methods {
            margin-top: 18px;
            margin-bottom: 10px;
            text-align: right;
        }
        .payment-methods label {
            margin-right: 16px;
            font-size: 1rem;
        }
        .payment-methods input[type="radio"] {
            margin-right: 6px;
        }
        @media (max-width: 600px) {
            .cart-container {
                padding: 10px;
            }
            table th, table td {
                padding: 6px;
            }
            .cart-actions {
                text-align: center;
            }
            .payment-methods {
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div class="cart-container">
        <a href="/dashboard" class="back-link">&larr; Back to Dashboard</a>
        <h1>Your Shopping Cart</h1>
        <div id="cart-content">
            <div class="loading">Loading your cart...</div>
        </div>
    </div>

    <script>
        // Get user ID from localStorage
        const user_id = localStorage.getItem('user_id');
        if (!user_id) {
            window.location.href = '/login'; // Redirect if not logged in
        }

        // Format currency as INR
        function formatINR(amount) {
            return "₹" + amount.toFixed(2);
        }

        // Fetch product details
        async function fetchProductDetails(productId) {
            try {
                const response = await fetch(`/products/${productId}`);
                if (!response.ok) throw new Error("Product not found");
                return await response.json();
            } catch (error) {
                console.error("Error fetching product:", error);
                return { name: "Unknown Product", price: 0 };
            }
        }

        // Load and render the cart
        async function loadCart() {
            try {
                document.getElementById("cart-content").innerHTML = '<div class="loading">Loading your cart...</div>';
                
                // 1. Fetch cart data
                const cartResponse = await fetch(`/cart/${user_id}`);
                if (!cartResponse.ok) throw new Error("Failed to load cart");
                const cartData = await cartResponse.json();

                // 2. Get product details for each item
                const productIds = Object.keys(cartData.cart);
                const cartItems = await Promise.all(
                    productIds.map(async (productId) => {
                        const product = await fetchProductDetails(productId);
                        return {
                            id: productId,
                            name: product.name,
                            price: product.price,
                            quantity: parseInt(cartData.cart[productId])
                        };
                    })
                );

                // 3. Render the cart
                renderCart({ items: cartItems });
            } catch (err) {
                console.error("Cart loading error:", err);
                document.getElementById("cart-content").innerHTML = `
                    <div class="empty">
                        <p>Failed to load cart. Please try again later.</p>
                        <button class="btn btn-primary" onclick="loadCart()">Retry</button>
                    </div>
                `;
            }
        }

        // Render the cart
        function renderCart(cart) {
            const cartDiv = document.getElementById("cart-content");
            if (!cart?.items || cart.items.length === 0) {
                cartDiv.innerHTML = `
                    <div class="empty">
                        <p>Your cart is empty.</p>
                        <a href="/dashboard" class="btn btn-primary">Continue Shopping</a>
                    </div>
                `;
                return;
            }

            let rows = "";
            let total = 0;
            cart.items.forEach((item) => {
                const subtotal = (item.price || 0) * (item.quantity || 0);
                total += subtotal;
                rows += `
                    <tr>
                        <td>${item.name}</td>
                        <td>
                            <input type="number" min="1" value="${item.quantity}" 
                                   onchange="updateQuantity(${item.id}, this.value)">
                        </td>
                        <td>${formatINR(item.price)}</td>
                        <td>${formatINR(subtotal)}</td>
                        <td class="actions">
                            <button onclick="removeFromCart(${item.id})">Remove</button>
                        </td>
                    </tr>
                `;
            });

            cartDiv.innerHTML = `
                <table>
                    <thead>
                        <tr>
                            <th>Item</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Subtotal</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${rows}
                        <tr class="total-row">
                            <td colspan="3"><strong>Total</strong></td>
                            <td colspan="2"><strong>${formatINR(total)}</strong></td>
                        </tr>
                    </tbody>
                </table>
                <div class="payment-methods">
                    <label>
                        <input type="radio" name="paymentMethod" value="stripe" checked>
                        <span style="color:#635bff;font-weight:bold;">Stripe</span>
                    </label>
                    <label>
                        <input type="radio" name="paymentMethod" value="paypal">
                        <span style="color:#ffc439;font-weight:bold;">PayPal</span>
                    </label>
                </div>
                <div class="cart-actions">
                    <button class="btn btn-primary" onclick="checkoutCart()">Proceed to Checkout</button>
                    <button class="btn btn-danger" onclick="clearCart()">Clear Cart</button>
                </div>
            `;
        }

        // Update item quantity
        async function updateQuantity(productId, newQuantity) {
            try {
                await fetch('/cart/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        user_id, 
                        product_id: productId,
                        quantity: Math.max(1, parseInt(newQuantity))
                    })
                });
                loadCart();
            } catch (err) {
                alert("Failed to update quantity. Please try again.");
            }
        }

        // Remove item from cart
        async function removeFromCart(productId) {
            if (!confirm("Remove this item from your cart?")) return;
            try {
                await fetch('/cart/remove', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ user_id, product_id: productId })
                });
                loadCart();
            } catch (err) {
                alert("Failed to remove item. Please try again.");
            }
        }

        // Clear entire cart
        async function clearCart() {
            if (!confirm("Are you sure you want to clear your entire cart?")) return;
            try {
                await fetch(`/cart/delete?user_id=${user_id}`, { 
                    method: 'DELETE' 
                });
                loadCart();
            } catch (err) {
                alert("Failed to clear cart. Please try again.");
            }
        }

        // Checkout with selected payment method
        function checkoutCart() {
            // Get selected payment method
            const method = document.querySelector('input[name="paymentMethod"]:checked');
            if (!method) {
                alert("Please select a payment method.");
                return;
            }
            // Redirect to your payment endpoint
            if (method.value === "stripe") {
                window.location.href = `/checkout/stripe?user_id=${user_id}`;
            } else if (method.value === "paypal") {
                window.location.href = `/checkout/paypal?user_id=${user_id}`;
            }
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', loadCart);
    </script>
</body>
</html>

